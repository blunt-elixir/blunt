defmodule Blunt.Message.ChangesetTest do
  use ExUnit.Case

  defmodule EmbeddedMessage do
    use Blunt.ValueObject
    field :name, :string
  end

  defmodule SomeCommand do
    use Blunt.Command
    option :test_option, :boolean
    option :reply_to, :pid
    field :name, :string
    field :msg, EmbeddedMessage

    def handle_validate(changeset, opts) do
      reply_to = Keyword.get(opts, :reply_to)
      send(reply_to, {:opts, opts})
      changeset
    end
  end

  test "works" do
    opts = [test_option: true, reply_to: self()]

    assert {:ok, %SomeCommand{msg: %EmbeddedMessage{name: "chris"}}} =
             SomeCommand.new(%{name: "John", msg: %{name: "chris"}}, %{}, opts)

    assert_receive {:opts, opts}
    assert true = Keyword.get(opts, :test_option)
  end

  describe "embedded field" do
    defmodule EmbedsManyCommand do
      use Blunt.Command
      field :one, EmbeddedMessage
      field :many, {:array, EmbeddedMessage}
      field :optionals, {:array, EmbeddedMessage}, required: false
    end

    test "passes required option to cast_embed/3 not validate_required/3" do
      refute ExUnit.CaptureIO.capture_io(:stderr, fn ->
               assert {:ok, %EmbedsManyCommand{one: %EmbeddedMessage{}, many: [%EmbeddedMessage{}, %EmbeddedMessage{}]}} =
                        EmbedsManyCommand.new(%{one: %{}, many: [%{}, %{}]})
             end) =~
               ~r/attempting to validate embed_many field :many/
    end

    test "errors when blank" do
      assert {:error, %{many: ["can't be blank"], one: ["can't be blank"]}} =
               EmbedsManyCommand.new(%{one: nil, many: [], optionals: [%{}]})
    end
  end

  describe "autogenerated id field" do
    defmodule WithAutoId do
      use Blunt.Command
      field :id, :binary_id, autogenerate: {UUID, :uuid4}, required: false
    end

    test "is generated" do
      {:ok, %{id: id}} = WithAutoId.new()
      assert {:ok, _} = UUID.info(id)
    end

    test "can pass value" do
      id = UUID.uuid4()
      {:ok, %{id: ^id}} = WithAutoId.new(id: id)
    end
  end
end
